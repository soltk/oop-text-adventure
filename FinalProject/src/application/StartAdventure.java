/*
 * Written by:
 * 
 * Liz Berberena
 * Jack Davitt
 * Shazia Mansuri
 * Simran Nanwani
 * Huda Yousef
 * 
 */

package application;

public class StartAdventure {
/*
A StartAdventure class which will have the following
i. Contains the code used to create a new game object
ii. Creates the game “environment” whether it is rooms, campuses,
etc. and fills those environments. If for example, you have the
user answer questions, the questions should be generated by
this class
iii. Displays relevant information to the user, such as “you are here”
indicator
iv. Handles commands from the user (including those that cause
exceptions)
**/
	
	private final int LOBBY = 1;
	private final int BAR = 2;
	private final int KITCHEN = 3;
	private final int HALLWAY = 4;
	private final int BEDROOM = 5;
	private final int BATHROOM = 6;
	private final int OUTSIDE = 7;
		
	private int roomNum;
	
	public StartAdventure() {
		roomNum = 0;		
	}
	
	public StartAdventure(int roomNum) {
		this.roomNum = roomNum;	
	}
	
	public void setRoomNumber(int roomNum) {
		this.roomNum = roomNum;
	}
	
	public int getRoomNumber() {
		return this.roomNum;
	}
	
	public String getRoomDescription(boolean flashlight){
		String description = "";
		
		if(this.roomNum == LOBBY) {
			
			if(flashlight == true) {
			description = "You are back in the mansion lobby..."
					+ "\nYou can see a glittering key lying on the corner table to the north of you, and locate a dark hallway to the west. You are not sure where it leads. What would you like to do?";
			} else if(flashlight == false){
				description = "You are inside the lobby of a haunted mansion. You’re not sure how you got here, but the door behind you is dead bolted shut. There is no turning back now."
					+ "\nIt is pitch black, but you can see a faint light coming from the east of where you’re standing. What would you like to do? ";
			}
			
		} else if(this.roomNum == BAR) {
			description = "You are in the bar..."
					+ "\nYou see a flashlight on the counter and a bottle of liquor";
			
		} else if(this.roomNum == KITCHEN) {
			description = "You are in the kitchen...";
			
		} else if(this.roomNum == HALLWAY) {
			description = "You are in the hallway...";
			
		} else if(this.roomNum == BEDROOM) {
			description = "You are in the master bedroom...";
			
		} else if(this.roomNum == BATHROOM) {
			description = "You are in the bathroom...";
			
		} else if(this.roomNum == OUTSIDE) {
			description = "You are outside...";
			
		}
		
		
		return description;
	}
	
	public boolean[] lobbyRoom(String command, boolean[] inventory) {
		//for inventory positions, 0 = flashlight, 1 = bottle, 2 = pipe, 3 = keyCar, 4 = keyHall
		boolean[] newInv = inventory;
				
		command = command.trim();
		
		if(command.equalsIgnoreCase("go north"))						
			System.out.println("There's nothing in that direction."); 
						
		else if(command.equalsIgnoreCase("go east")) {
			System.out.println("You walk east towards the light.");
			this.roomNum = 2;
				
		} else if(command.equalsIgnoreCase("go south"))
			System.out.println("The entrance door is locked. You can't leave, but how did you get here?");
				
		else if(command.equalsIgnoreCase("go west")) {
			if(newInv[0] == true) {					
				if(newInv[4] == true) {
					System.out.println("You successfully unlocked the door to the hallway! You proceed west.");
					this.roomNum = 4;
					
				} else
					System.out.println("The door to the hallway is locked. You need a key.");
			
			} else if(newInv[0] == false)
				System.out.println("It's too dark to see that far.");
		}
			
		else if(command.equalsIgnoreCase("take") && newInv[0] == false)			
			System.out.println("You feel around for the key but cannot find it in the dark.");
			
		else if(command.equalsIgnoreCase("take") && newInv[0] == true && newInv[4])
			System.out.println("There is nothing to take.");
		
		else if(command.equalsIgnoreCase("take") && newInv[0] == true && newInv[4] == false) {
			System.out.println("You take the key.");
			newInv[4] = true;	
					
		} else if(command.equalsIgnoreCase("drink")) {
				
			if(newInv[1] == false)
				System.out.println("Calm down, you party animal. You don't have anything to drink.");
			
			else {
				System.out.println("You drink all of the liquor in the bottle and now feel inebriated. "
						+ "\nYou lose 1 health point!");
				//Make player lose health somehow!!!
				newInv[1] = false; //*************THE BOTTLE IS REMOVED FROM THE PLAYER'S INVENTORY AND CAN NO LONGER BE USED
			}
				
		} else if(command.equalsIgnoreCase("help")) {
				System.out.println("List of Commands:"
						+ "\ngo north"
						+ "\ngo east"
						+ "\ngo west"
						+ "\ngo south"
						+ "\ntake"
						+ "\ndrink"
						+ "\nheal"
						+ "\nattack"
						+ "\nhelp");
				
		} else
			System.out.println("Please enter only commands from the command list.");
		
		return newInv;
		
	} //end of action() method
	
	public boolean[] barRoom(String command, boolean[] inventory) {
		//for inventory positions, 0 = flashlight, 1 = bottle, 2 = pipe, 3 = keyCar, 4 = keyHall
		boolean[] newInv = inventory;
		
		command = command.trim();
		
		if(command.equalsIgnoreCase("go north"))
			System.out.println("There's nothing in that direction.");
			
		else if(command.equalsIgnoreCase("go east")) {
			System.out.println("You walk east into the kitchen.");
			this.roomNum = 3;
			
		} else if(command.equalsIgnoreCase("go south"))
			System.out.println("There's nothing in that direction.");
			
		else if(command.equalsIgnoreCase("go west")) {
			System.out.println("You go west back to the lobby.");
			this.roomNum = 1;
			
		} else if(command.equalsIgnoreCase("take") && newInv[0] == true && newInv[1] == true)
			System.out.println("There is nothing to take.");
		
		else if(command.equalsIgnoreCase("take") && newInv[0] == true && newInv[1] == false)
			System.out.println("There is nothing to take.");
		
		else if(command.equalsIgnoreCase("take") && newInv[0] == false && newInv[1] == false) {
			System.out.println("You pick up the flashlight and the bottle of liquor.");
			newInv[0] = true;
			newInv[1] = true;
		
		} else if(command.equalsIgnoreCase("drink")) {
			
			if(newInv[1] == true) {
				System.out.println("You drink all of the liquor in the bottle and find yourself inebriated. "
						+ "\nYou lost 1 health!");
				//loss of health
				newInv[1] = false; //*************THE BOTTLE IS REMOVED FROM THE PLAYER'S INVENTORY AND CAN NO LONGER BE USED
				
			} else {
				System.out.println("Calm down, party animal. You don't have anything to drink.");
				
			}
		} else if(command.equalsIgnoreCase("attack")) {
			
			//enemy
			
		} else if(command.equalsIgnoreCase("heal")) {
			
			if(newInv[1] == true) {
			System.out.println("You rip off a piece of cloth from your shirt and apply alcohol on it. "
					+ "\nYou then wrap the cloth around your wound. "
					+ "\nYou heal yourself by 1 point!");
			//gain health
			newInv[1] = false; //*************THE BOTTLE IS REMOVED FROM THE PLAYER'S INVENTORY AND CAN NO LONGER BE USED
			}
			
		} else if(command.equalsIgnoreCase("help")) {
			System.out.println("List of Commands:"
					+ "\ngo north"
					+ "\ngo east"
					+ "\ngo west"
					+ "\ngo south"
					+ "\ntake"
					+ "\ndrink"
					+ "\nheal"
					+ "\nattack"
					+ "\nhelp");
		} else
			System.out.println("Please enter only commands from the command list.");	
		
		return newInv;
	}
	
	public boolean[] kitchenRoom(String command, boolean[] inventory) {
		//for inventory positions, 0 = flashlight, 1 = bottle, 2 = pipe, 3 = keyCar, 4 = keyHall
		boolean[] newInv = inventory;
		
		command = command.trim();
		
		if(command.equalsIgnoreCase("go north"))
			System.out.println("There is nowhere for you to go.");
			
		else if(command.equalsIgnoreCase("go east"))
			System.out.println("There is nowhere for you to go.");
			
		else if(command.equalsIgnoreCase("go south"))
			System.out.println("There is nowhere for you to go.");
			
		else if(command.equalsIgnoreCase("go west")) {
			System.out.println("You go west back to the bar.");
			this.roomNum = 2;
		
		} else if(command.equalsIgnoreCase("drink")) {
			
			if(newInv[1] == true) {
				System.out.println("You drink all of the liquor in the bottle and find yourself inebriated. "
						+ "\nYou lost 1 health!");
				//loss of health
				newInv[1] = false; //*************THE BOTTLE IS REMOVED FROM THE PLAYER'S INVENTORY AND CAN NO LONGER BE USED
				
			} else
				System.out.println("Calm down, party animal. You don't have anything to drink.");
		
		// ****************************** KITCHEN ROOM'S KEY PICKUP FUNCTIONALITY WILL NOT WORK IF ENEMY FUNCTIONALITY IS NOT IMPLEMENTED
		} else if(command.equalsIgnoreCase("take") && newInv[3] == false /** && enemy is defeated */) {
			System.out.println("You step around your defeated enemy and pick up another key.");
			newInv[3] = true;
			
		} else if(command.equalsIgnoreCase("take") && newInv[3] == false /** && enemy is alive */)
			System.out.println("You see another key on the floor behind your enemy. " + "\nThe enemy will not let you pass!");
		
		else if(command.equalsIgnoreCase("take") && newInv[3] == true)
			System.out.println("There is nothing to take.");
		
		else if(command.equalsIgnoreCase("attack")) {
			
			//enemy
			
		} else if(command.equalsIgnoreCase("heal")) {
			
			if(newInv[1] == true) {
			System.out.println("You rip off a piece of cloth from your shirt and apply alcohol on it. "
					+ "\nYou then wrap the cloth around your wound. "
					+ "\nYou heal yourself by 1 point!");
			//gain health
			newInv[1] = false; //*************THE BOTTLE IS REMOVED FROM THE PLAYER'S INVENTORY AND CAN NO LONGER BE USED
			}
			
		} else if(command.equalsIgnoreCase("help")) {
			System.out.println("List of Commands:"
					+ "\ngo north"
					+ "\ngo east"
					+ "\ngo west"
					+ "\ngo south"
					+ "\ntake"
					+ "\ndrink"
					+ "\nheal"
					+ "\nattack"
					+ "\nhelp");
		} else
			System.out.println("Please enter only commands from the command list.");
		
		return newInv;
	}
	
	public boolean[] hallwayRoom(String command, boolean[] inventory) {
		//for inventory positions, 0 = flashlight, 1 = bottle, 2 = pipe, 3 = keyCar, 4 = keyHall
		boolean[] newInv = inventory;
		
		command = command.trim();
		
		if(command.equalsIgnoreCase("go north"))
			System.out.println("There's nothing in that direction.");
			
		else if(command.equalsIgnoreCase("go east")) {
			System.out.println("You walk east back into the lobby.");
			this.roomNum = 1;
			
		} else if(command.equalsIgnoreCase("go south"))
			System.out.println("There's nothing in that direction.");
			
		else if(command.equalsIgnoreCase("go west")) {
			System.out.println("You go west into the master bedroom.");
			this.roomNum = 5;
			
		} else if(command.equalsIgnoreCase("take"))
			System.out.println("There is nothing to take.");
		
		else if(command.equalsIgnoreCase("drink")) {
			
			if(newInv[1] == true) {
				System.out.println("You drink all of the liquor in the bottle and find yourself inebriated. "
						+ "\nYou lost 1 health!");
				//loss of health
				newInv[1] = false; //*************THE BOTTLE IS REMOVED FROM THE PLAYER'S INVENTORY AND CAN NO LONGER BE USED
				
			} else {
				System.out.println("Calm down, party animal. You don't have anything to drink.");
				
			}
		} else if(command.equalsIgnoreCase("attack")) {
			
			//enemy
			
		} else if(command.equalsIgnoreCase("heal")) {
			
			if(newInv[1] == true) {
			System.out.println("You rip off a piece of cloth from your shirt and apply alcohol on it. "
					+ "\nYou then wrap the cloth around your wound. "
					+ "\nYou heal yourself by 1 point!");
			//gain health
			newInv[1] = false; //*************THE BOTTLE IS REMOVED FROM THE PLAYER'S INVENTORY AND CAN NO LONGER BE USED
			}
			
		} else if(command.equalsIgnoreCase("help")) {
			System.out.println("List of Commands:"
					+ "\ngo north"
					+ "\ngo east"
					+ "\ngo west"
					+ "\ngo south"
					+ "\ntake"
					+ "\ndrink"
					+ "\nheal"
					+ "\nattack"
					+ "\nhelp");
		}  else
			System.out.println("Please enter only commands from the command list.");
		
		return newInv;
	}
	
	public boolean[] bedRoom(String command, boolean[] inventory) {
		//for inventory positions, 0 = flashlight, 1 = bottle, 2 = pipe, 3 = keyCar, 4 = keyHall
		boolean[] newInv = inventory;
		
		command = command.trim();
		
		if(command.equalsIgnoreCase("go north")) {
			System.out.println("You walk north into the bathroom.");
			this.roomNum = 6;
			
		} else if(command.equalsIgnoreCase("go east")) {
			System.out.println("You walk back into the hallway.");
			this.roomNum = 4;
			
		} else if(command.equalsIgnoreCase("go south")) {
			System.out.println("There's nothing in that direction.");
			
		} else if(command.equalsIgnoreCase("go west")) {
			System.out.println("There's nothing in that direction.");
		
		} else if(command.equalsIgnoreCase("drink")) {
			
			if(newInv[1] == true) {
				System.out.println("You drink all of the liquor in the bottle and find yourself inebriated. "
						+ "\nYou lost 1 health!");
				//loss of health
				newInv[1] = false; //*************THE BOTTLE IS REMOVED FROM THE PLAYER'S INVENTORY AND CAN NO LONGER BE USED
				
			} else {
				System.out.println("Calm down, party animal. You don't have anything to drink.");
				
			}
		} else if(command.equalsIgnoreCase("attack")) {
			
			//enemy
			
		} else if(command.equalsIgnoreCase("heal")) {
			
			if(newInv[1] == true) {
			System.out.println("You rip off a piece of cloth from your shirt and apply alcohol on it. "
					+ "\nYou then wrap the cloth around your wound. "
					+ "\nYou heal yourself by 1 point!");
			//gain health
			newInv[1] = false; //*************THE BOTTLE IS REMOVED FROM THE PLAYER'S INVENTORY AND CAN NO LONGER BE USED
			}
			
		} else if(command.equalsIgnoreCase("help")) {
			System.out.println("List of Commands:"
					+ "\ngo north"
					+ "\ngo east"
					+ "\ngo west"
					+ "\ngo south"
					+ "\ntake"
					+ "\ndrink"
					+ "\nheal"
					+ "\nattack"
					+ "\nhelp");
		} else
			System.out.println("Please enter only commands from the command list.");
				
		return newInv;
	}
	
	public boolean[] bathRoom(String command, boolean[] inventory) {
		//for inventory positions, 0 = flashlight, 1 = bottle, 2 = pipe, 3 = keyCar, 4 = keyHall
		boolean[] newInv = inventory;
		
		command = command.trim();
		
		if(command.equalsIgnoreCase("go north")) {
			System.out.println("PIPE/WINDOW INTERACTION");
			this.roomNum = 7;
			
		} else if(command.equalsIgnoreCase("go east")) {
			System.out.println("There is nowhere for you to go.");
			
		} else if(command.equalsIgnoreCase("go south")) {
			System.out.println("You walk back into the master bedroom.");
			this.roomNum = 5;
			
		} else if(command.equalsIgnoreCase("go west"))
			System.out.println("There is nowhere for you to go.");
			
		else if(command.equalsIgnoreCase("take") && newInv[2] == true)
			System.out.println("There is nothing to take");
		
		else if(command.equalsIgnoreCase("take") && newInv[2] == false) {
			System.out.println("You pick up the pipe.");
			newInv[2] = true;
		
		} else if(command.equalsIgnoreCase("drink")) {
			
			if(newInv[1] == true) {
				System.out.println("You drink all of the liquor in the bottle and find yourself inebriated. "
						+ "\nYou lost 1 health!");
				//loss of health
				newInv[1] = false; //*************THE BOTTLE IS REMOVED FROM THE PLAYER'S INVENTORY AND CAN NO LONGER BE USED
				
			} else
				System.out.println("Calm down, party animal. You don't have anything to drink.");
				
		} else if(command.equalsIgnoreCase("attack")) {
			
			//enemy
			
		} else if(command.equalsIgnoreCase("heal")) {
			
			if(newInv[1] == true) {
			System.out.println("You rip off a piece of cloth from your shirt and apply alcohol on it. "
					+ "\nYou then wrap the cloth around your wound. "
					+ "\nYou heal yourself by 1 point!");
			//gain health
			newInv[1] = false; //*************THE BOTTLE IS REMOVED FROM THE PLAYER'S INVENTORY AND CAN NO LONGER BE USED
			}
			
		} else if(command.equalsIgnoreCase("help")) {
			System.out.println("List of Commands:"
					+ "\ngo north"
					+ "\ngo east"
					+ "\ngo west"
					+ "\ngo south"
					+ "\ntake"
					+ "\ndrink"
					+ "\nheal"
					+ "\nattack"
					+ "\nhelp");
		} else
			System.out.println("Please enter only commands from the command list.");		
		
		return newInv;
	}
	
	public boolean[] outsideRoom(String command, boolean[] inventory) {
		//for inventory positions, 0 = flashlight, 1 = bottle, 2 = pipe, 3 = keyCar, 4 = keyHall
		boolean[] newInv = inventory;
		
		command = command.trim();
		
		if(command.equalsIgnoreCase("go north"))
			System.out.println("ENEMY INTERACTION");
			
		else if(command.equalsIgnoreCase("go east"))
			System.out.println("There is a fence you cannot climb.");
			
		else if(command.equalsIgnoreCase("go south"))
			System.out.println("Jagged glass prevents you from climbing back into the window.");
			
		else if(command.equalsIgnoreCase("go west"))
			System.out.println("There is a fence you cannot climb.");
		
		else if(command.equalsIgnoreCase("drink")) {
			
			if(newInv[1] == true) {
				System.out.println("You drink all of the liquor in the bottle and find yourself inebriated. "
						+ "\nYou lost 1 health!");
				//loss of health
				newInv[1] = false; //*************THE BOTTLE IS REMOVED FROM THE PLAYER'S INVENTORY AND CAN NO LONGER BE USED
				
			} else
				System.out.println("Calm down, party animal. You don't have anything to drink.");
			
		} else if(command.equalsIgnoreCase("attack")) {
			
			//enemy
			
		} else if(command.equalsIgnoreCase("heal")) {
			
			if(newInv[1] == true) {
			System.out.println("You rip off a piece of cloth from your shirt and apply alcohol on it. "
					+ "\nYou then wrap the cloth around your wound. "
					+ "\nYou heal yourself by 1 point!");
			//gain health
			newInv[1] = false; //*************THE BOTTLE IS REMOVED FROM THE PLAYER'S INVENTORY AND CAN NO LONGER BE USED
			}
			
		} else if(command.equalsIgnoreCase("help")) {
			System.out.println("List of Commands:"
					+ "\ngo north"
					+ "\ngo east"
					+ "\ngo west"
					+ "\ngo south"
					+ "\ntake"
					+ "\ndrink"
					+ "\nheal"
					+ "\nattack"
					+ "\nhelp");
		}  else
			System.out.println("Please enter only commands from the command list.");
		
		return newInv;
	}
	
}//end of StartAdventure class
